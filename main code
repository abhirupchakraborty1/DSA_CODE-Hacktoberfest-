/*  C Program to implement priority queue using linked list  */

#include<stdio.h>//Including the header file for standard input and output operations
#include<stdlib.h>//Including the stdlib.h header file

struct node//Structure named node
{
        int priority;//Stores priority
        int info;//Stores the data
        struct node *link;//Creates the link to the next node
}*front=NULL;

void insert(int item, int item_priority);//insert function signature
int del();//del function signature
void display();//display function signature
int isEmpty();//isEmpty function signature

int main()//main function
{
        int choice,item,item_priority;
        while(1)//running an infinite loop
        {
                printf("\n1.Insert\n");
                printf("2.Delete\n");
                printf("3.Display\n");
                printf("4.Quit\n");
                printf("\nEnter your choice : ");
                scanf("%d", &choice);//Accepting the choice of the user

                switch(choice)
                {
                 case 1:
                        printf("\nInput the item to be added in the queue : ");
                        scanf("%d",&item);
                        printf("\nEnter its priority : ");
                        scanf("%d",&item_priority);
                        insert(item, item_priority);//calling the insert function
                        break;
                 case 2:
                        printf("\nDeleted item is %d\n",del());//Calling the delete function
                        break;
                 case 3:
                        display();//Calling the delete function
                        break;
                 case 4:
                        exit(1);
                 default ://default condition when choice value does no match any case condition
                        printf("\nWrong choice\n");
                }              //End of switch/
        }                   //End of while/

        return 0;
}                           //End of main()/

void insert(int item,int item_priority)//insert function defination
{
        struct node *tmp,*p;

        tmp=(struct node *)malloc(sizeof(struct node));
        if(tmp==NULL)
        {
                printf("\nMemory not available\n");
                return;
        }
        tmp->info=item;
        tmp->priority=item_priority;
        //Queue is empty or item to be added has priority more than first element/
        if( isEmpty() || item_priority < front->priority )
        {
                tmp->link=front;
                front=tmp;
        }
        else
        {
                p = front;
                while( p->link!=NULL && p->link->priority<=item_priority )
                        p=p->link;
                tmp->link=p->link;
                p->link=tmp;
        }
}                           //End of insert()/

int del()//delete function defination
{
        struct node *tmp;
        int item;
        if( isEmpty() )
        {
                printf("\nQueue Underflow\n");//Queue underflow condition
                exit(1);
        }
        else
        {
                tmp=front;
                item=tmp->info;
                front=front->link;
                free(tmp);
        }
        return item;
}                  //End of del()/

int isEmpty()//is Empty function defination
{
        if( front == NULL )
                return 1;
        else
                return 0;

}                 //End of isEmpty()/


void display()//display function defination
{
        struct node *ptr;
        ptr=front;
        if( isEmpty() )
                printf("\nQueue is empty\n");
        else
        {       printf("\nQueue is :\n");
                printf("\nPriority       Item\n");
                while(ptr!=NULL)
                {
                        printf("%5d        %5d\n",ptr->priority,ptr->info);
                        ptr=ptr->link;
                }
        }
}             /*End of display() */
